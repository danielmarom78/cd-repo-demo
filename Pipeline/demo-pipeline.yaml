apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: ngnix-api-gateway-workshop-git
spec:
  params:
    - default: demo
      name: APP_NAME
      type: string
    - default: 'https://github.com/tal-hason/nodejs-demo-app.git'
      name: GIT_REPO
      type: string
    - default: main
      name: GIT_REVISION
      type: string
    - default: quay.io/thason/gitops-demo
      name: IMAGE_NAME
      type: string
    - default: .
      name: PATH_CONTEXT
      type: string
    - default: node
      name: IMAGE_TAG
      type: string
    - default: 'https://github.com/tal-hason/cd-repo-demo.git'
      name: GIT_CD_REPO
      type: string
    - default: 'True'
      name: BUILD
      type: string
    - default: develop
      name: DEPLOY_ENV
      type: string
    - default: frontend
      name: SERVICE_NAME
      type: string
  tasks:
    - name: fetch-repository
      params:
        - name: url
          value: $(params.GIT_REPO)
        - name: revision
          value: $(params.GIT_REVISION)
        - name: subdirectory
          value: ''
        - name: deleteExisting
          value: 'true'
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: workspace
    - name: build
      params:
        - name: IMAGE
          value: '$(params.IMAGE_NAME):$(params.IMAGE_TAG)'
        - name: TLSVERIFY
          value: 'false'
        - name: CONTEXT
          value: $(params.PATH_CONTEXT)
      runAfter:
        - fetch-repository
      taskRef:
        kind: ClusterTask
        name: buildah
      when:
        - input: $(params.BUILD)
          operator: in
          values:
            - 'True'
      workspaces:
        - name: source
          workspace: workspace
    - name: deploy
      params:
        - name: SCRIPT
          value: >-
            oc patch deployment $(params.APP_NAME) -p
            '{"spec":{"template":{"spec":{"containers":[{"name":"$(params.APP_NAME)","image":"$(params.IMAGE_NAME):$(params.IMAGE_TAG)"}]}}}}'
      runAfter:
        - build
      taskRef:
        kind: ClusterTask
        name: openshift-client
      when:
        - input: $(params.BUILD)
          operator: notin
          values:
            - 'True'
    - name: update-chart
      params:
        - name: git-url-source
          value: github.com
        - name: git-user
          value: tal-hason
        - name: git-repo-name
          value: cd-repo-demo
        - name: tag
          value: $(params.IMAGE_TAG)
        - name: branch
          value: $(params.GIT_REVISION)
        - name: git-secret-name
          value: gh-token
        - name: application-name
          value: $(params.APP_NAME)
        - name: deploy-env
          value: $(params.DEPLOY_ENV)
        - name: service-name
          value: $(params.SERVICE_NAME)
        - name: image
          value: $(params.IMAGE_NAME)
      runAfter:
        - build
      taskRef:
        kind: ClusterTask
        name: update-chart
  workspaces:
    - name: workspace
